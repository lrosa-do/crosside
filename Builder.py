# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main_org.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import io
import os
import sys
from subprocess import STDOUT, PIPE
import argparse
import shutil
import time
import json
import re
import subprocess
from subprocess import check_output, CalledProcessError, STDOUT
from datetime import datetime

import http.server
import socketserver


import zipfile


nativeManifeste="""<?xml version="1.0" encoding="utf-8"?>
<manifest xmlns:android="http://schemas.android.com/apk/res/android" package="@apppkg@"     android:versionCode="1" android:versionName="1.0">
            <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/>
    	    <uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/>
            <uses-sdk  android:compileSdkVersion="30"     android:minSdkVersion="23"  android:targetSdkVersion="30" />
    	   <uses-feature android:glEsVersion="0x00020000" android:required="true" />
    	    <application android:allowBackup="false" android:label="@applbl@" android:icon="@mipmap/ic_icon" >

           <activity android:name="@appactv@"
             android:theme="@android:style/Theme.NoTitleBar.Fullscreen"
             android:configChanges="orientation|keyboardHidden|screenSize"
             android:screenOrientation="landscape" android:launchMode="singleTask"
             android:clearTaskOnLaunch="true">
            <meta-data android:name="android.app.lib_name" android:value="main" />
                               
             <intent-filter>
                  <action android:name="android.intent.action.MAIN" />
                   <category android:name="android.intent.category.LAUNCHER" />
	     </intent-filter>
           </activity>
           </application>
</manifest>"""


javaNative="""package @apppkg@; 

public class @appactv@ extends android.app.NativeActivity {
  static {
  System.loadLibrary("main");
 }
}"""

ANDROID_SDK="/home/djoker/Android/Sdk"
ANDROID_NDK="/home/djoker/Android/Sdk/ndk/22.1.7171670"
AAPT       =ANDROID_SDK+'/build-tools/30.0.3/aapt'
DX         =ANDROID_SDK+'/build-tools/30.0.3/dx'
DX8        =ANDROID_SDK+'/build-tools/30.0.3/d8'
ZIPALIGN   =ANDROID_SDK+'/build-tools/30.0.3/zipalign'
APKSIGNER  =ANDROID_SDK+'/build-tools/30.0.3/apksigner'
PLATFORM   =ANDROID_SDK+'/platforms/android-31/android.jar'
JAVA_SDK   ='/usr/lib/jvm/jdk1.8.0_291'
JAVA_LIB_RT='/usr/lib/jvm/jdk1.8.0_291/jre/lib/rt.jar'
JAVAFX     ="/usr/lib/jvm/jdk1.8.0_291/lib/javafx-mx.jar"

ANDROIDFXRT="/media/djoker/code/linux/python/compiler/javafx/jarlibs/jfxrt.jar"
ANDROIDJFXDVK="/media/djoker/code/linux/python/compiler/javafx/jarlibs/jfxdvk.jar"
ANDROIDFXCOMPACT="/media/djoker/code/linux/python/compiler/javafx/jarlibs/compat-1.0.0.jar"
ANDROIDMULTIDEX="/media/djoker/code/linux/python/compiler/javafx/jarlibs/android-support-multidex.jar"
ANDROIDDESUGAR="/media/djoker/code/linux/python/compiler/javafx/jarlibs/desugar_jdk_libs-1.0.10.jar"

PORT = 8080
DIRECTORY = "/media/djoker/code/linux/python/projects/CppEditor/projects/Web/main"


class Handler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=DIRECTORY, **kwargs)



def trace(*args):
    result = ""
    for x in args:
        result += x
    print(result)
 


SHOW_COMMAND=True
    
        
def runProcess(command, args=[],wait=True):
    args = [command] + args
    def cmd_args_to_str(cmd_args):
        return ' '.join([arg if not ' ' in arg else '"%s"' % arg for arg in cmd_args])

    global SHOW_COMMAND
    if SHOW_COMMAND:
        trace("Execute -> ",cmd_args_to_str(args))
    proc = subprocess.Popen(args,
        stdout = subprocess.PIPE,
        stderr = subprocess.PIPE,
    )
    
    stdout, stderr = proc.communicate()
    if wait:
        proc.wait()
    return proc.returncode, stdout, stderr
    
def cmd_args_to_str(cmd_args):
    return ' '.join([arg if not ' ' in arg else '"%s"' % arg for arg in cmd_args])


def getParentDir(path, level=1):
  return os.path.normpath( os.path.join(path, *([".."] * level)) )

def cleanString(string):
    return "-".join(string.split())

def createPath(root,sub):
    path = os.path.join(os.path.dirname(os.path.abspath(root)), sub)
    trace("Create path ",path)
    if not os.path.exists(path):
            os.mkdir(path)

def createFolderTree(maindir):
    if not os.path.exists(maindir):
        try:
                    os.makedirs(maindir)
        except OSError as e:
                 trace('Something else happened'+str(e))
                
    #else:
    #    print("Process directory ",maindir," already exists")


#buildType 0 app 1, shared 2 static

def LinuxBuild(folderRoot ,appName, ListOBJS ,useCPP,LDARGS , buildType=0):
        args=[]
                
        cType = "gcc"
        if useCPP:
                cType="g++"
                
        if buildType==0:
            trace("Build Linux aplication")
            args.append("-o")
            export =folderRoot+os.path.sep+appName
            args.append(export)
            objs=""
            for obj in ListOBJS:
                objs+=obj+' '
                args.append(obj)
            #args.append('-s')

            for arg in LDARGS:
                value =arg.strip()
                if len(value)>1:
                    args.append(value)
            rootFolder=os.getcwd()+os.path.sep+"libs"+os.path.sep+"linux"
            args.append("-L"+rootFolder)
            trace("Add folder lib:",rootFolder)
        
                
            trace("Build to "+cType+" "+appName)
            code, out, err=runProcess(cType,args)
            if code!=0:
                trace(err.decode("utf-8") )
                trace("Operation Fail  .. ")
                return False
            
            
        
             
        if buildType==1:
            args.append("-shared")
            args.append("-fPIC")
            args.append("-o")
            export =folderRoot+os.path.sep+appName+".so"
            args.append(export)
            
            objs=""
            for obj in ListOBJS:
                objs+=obj+' '
                args.append(obj)
            #args.append('-s')

            for arg in LDARGS:
                value =arg.strip()
                if len(value)>1:
                    args.append(value)
            
            rootFolder=os.getcwd()+os.path.sep+"libs"+os.path.sep+"linux"
            args.append("-L"+rootFolder)
            trace("Add folder lib:",rootFolder)
            trace("Build to "+cType+" "+appName)

            code, out, err=runProcess(cType,args)
            if code!=0:
                trace(err.decode("utf-8") )
                trace("Operation Fail  .. ")
                return False
            
            
        if buildType==2:
            trace("compile to static lib")
            export =folderRoot+os.path.sep+appName+".a"
            code, out, err=runProcess("rm",["-f",export])
            if code!=0:
                trace(err.decode("utf-8") )
                trace("Operation Fail  .. ")
                return False
            trace(out.decode("utf-8") )

            args.append("-r")
            args.append("-s")
            args.append(export)
            for obj in ListOBJS:
                args.append(obj)

            code, out, err=runProcess("ar",args)
            if code!=0:
                trace(err.decode("utf-8") )
                trace("Operation Fail  .. ")
                return False
            print(out.decode("utf-8") )
            
        trace("Done :) ")
        return True
                             

def LinuxCompile(folderRoot ,name, srcs ,CARGS,CPPARGS, LDARGS,buildType=0,fullBuild=False,runApp=False):
    useCPP=False
    
    
    outFolder=folderRoot+os.path.sep+"obj"+os.path.sep+"Linux"+os.path.sep+name
    createFolderTree(outFolder)
    objsList=[]
    


    for src in srcs:
        if not os.path.isfile(src):
            trace("File not exists")
            continue
    
        args=[]
        srcFolder = os.path.dirname(os.path.abspath(src))
        objFolder =outFolder +  srcFolder.replace(folderRoot,"")
        
        createFolderTree(objFolder)
        filename, file_extension = os.path.splitext(src)
        basename = os.path.basename(src)
        basename_without_ext = os.path.splitext(os.path.basename(src))[0]
        objName = objFolder+os.path.sep+basename_without_ext+".o"
        objsList.append(objName)
        src_modified_time = os.path.getmtime(src)
        src_convert_time = time.ctime(src_modified_time)

        cType = "gcc"
        if len(file_extension)>=3:
                cType="g++"
                useCPP=True
                
        
        if not fullBuild:       
            if os.path.exists(objName):
                obj_modified_time = os.path.getmtime(objName)
                obj_convert_time   = time.ctime(obj_modified_time)
                if (src_convert_time<obj_convert_time):
                    trace("Skip  file"+ src)
                    continue
            
                 
    
        
        trace (cType," ",os.path.basename(src),">",os.path.basename(objName))

            
                
        args.append("-c")
        args.append(src)
        args.append("-o")
        args.append(objName)
        

        if useCPP:
            for arg in CPPARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    print(arg)   
        else:
            for arg in CARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    
        if buildType==1:
            args.append("-fPIC")

                        
            
        code, out, err=runProcess(cType,args)
        #print("err: '{}'".format(str(err)))
        #print("exit: {}".format(code))
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error: '
            #match = re.compile(rexp, re.DOTALL | re.IGNORECASE).findall(err.decode("utf-8"))
            erro =re.search(rexp,err.decode("utf-8"))
            try:    
                lineY=0
                lineX=0
                if erro:
                    linhas = erro.group().split(":")
                    lineX=int(linhas[2])
                    lineY=int(linhas[1])
            except:
                print("Erro unknow .. ")
            return
        trace(out.decode("utf-8") )
    trace("Compiling completed")
    
    sucess = LinuxBuild(folderRoot ,name,objsList ,useCPP,LDARGS,buildType)
    
    if runApp and sucess:
        export =folderRoot+os.path.sep+name
        if os.path.isfile(export):
            trace("Running  "+export)
            code, out, err=runProcess(export,[],False)
            if code!=0:
                trace(err.decode("utf-8") )
                return
            trace(out.decode("utf-8"))
            
        
    
    

def WebBuild(folderRoot ,appName, ListOBJS ,useCPP,LDARGS , buildType=0):
        args=[]

        outFolder=folderRoot+os.path.sep+"Web"+os.path.sep+appName
        createFolderTree(outFolder)
                
        cType = "emcc"
        if useCPP:
                cType="em++"
                
        if buildType==0:
            trace("Build EMSDK aplication")
            args.append("-o")
            
            export = outFolder+os.path.sep+appName+".html"
            args.append(export)
            objs=""
            for obj in ListOBJS:
                objs+=obj+' '
                args.append(obj)
            #args.append('-s')


            for arg in LDARGS:
                value =arg.strip()
                if len(value)>1:
                    args.append(value)
            rootFolder=os.getcwd()+os.path.sep+"libs"+os.path.sep+"web"
            args.append("-L"+rootFolder)
            trace("Add folder lib:",rootFolder)
        
                
            trace("Build to "+cType+" "+appName)
            code, out, err=runProcess(cType,args)
            if code!=0:
                trace(err.decode("utf-8") )
                trace("Operation Fail  .. ")
                return False
            
            
        
            
            
        if buildType==2:
            trace("compile to static lib")
            export =folderRoot+os.path.sep+appName+".a"
            args.append("rcs")
            args.append(export)
            for obj in ListOBJS:
                args.append(obj)
            code, out, err=runProcess("emar",args)
            if code!=0:
                trace(err.decode("utf-8") )
                trace("Operation Fail  .. ")
                return False
            print(out.decode("utf-8") )
            
        trace("Done :) ")
        return True
        
def WebCompile(folderRoot ,name, srcs ,CARGS,CPPARGS, LDARGS,buildType=0,fullBuild=False,runApp=False):
    useCPP=False
    outFolder=folderRoot+os.path.sep+"obj"+os.path.sep+"Web"+os.path.sep+name
    createFolderTree(outFolder)
    objsList=[]
    


    for src in srcs:
        if not os.path.isfile(src):
            trace("File not exists")
            continue
    
        args=[]
        srcFolder = os.path.dirname(os.path.abspath(src))
        objFolder =outFolder +  srcFolder.replace(folderRoot,"")
        
        createFolderTree(objFolder)
        filename, file_extension = os.path.splitext(src)
        basename = os.path.basename(src)
        basename_without_ext = os.path.splitext(os.path.basename(src))[0]
        objName = objFolder+os.path.sep+basename_without_ext+".o"
        objsList.append(objName)
        src_modified_time = os.path.getmtime(src)
        src_convert_time = time.ctime(src_modified_time)

        cType = "emcc"
        if len(file_extension)>=3:
                cType="em++"
                useCPP=True
                
        
        if not fullBuild:       
            if os.path.exists(objName):
                obj_modified_time = os.path.getmtime(objName)
                obj_convert_time   = time.ctime(obj_modified_time)
                if (src_convert_time<obj_convert_time):
                    trace("Skip  file"+ src)
                    continue
            
                 
    
        
        trace (cType," ",os.path.basename(src),">",os.path.basename(objName))

            
                
        args.append("-c")
        args.append(src)
        args.append("-o")
        args.append(objName)
        

        if useCPP:
            for arg in CPPARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    print(arg)   
        else:
            for arg in CARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    


                        
            
        code, out, err=runProcess(cType,args)
        #print("err: '{}'".format(str(err)))
        #print("exit: {}".format(code))
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error: '
            #match = re.compile(rexp, re.DOTALL | re.IGNORECASE).findall(err.decode("utf-8"))
            erro =re.search(rexp,err.decode("utf-8"))
            try:    
                lineY=0
                lineX=0
                if erro:
                    linhas = erro.group().split(":")
                    lineX=int(linhas[2])
                    lineY=int(linhas[1])
            except:
                print("Erro unknow .. ")
            return
        trace(out.decode("utf-8") )
    trace("Compiling completed")
    
    sucess = WebBuild(folderRoot ,name,objsList ,useCPP,LDARGS,buildType)
    
    if runApp and sucess:
        pass
            


def androidCompileJavaNative(mainRoot,appName,ANDROID_PACK,ANDROID_LABEL,ANDROID_ACTIVITY,runApp):


    OSP=os.path.sep
    binFolder=mainRoot+OSP+"Android"+OSP+appName+OSP

   



    
    java = binFolder+"java"
    if not os.path.exists(java):
        trace("Create :"+java)
        os.mkdir(java)

    tmp = binFolder+"tmp"
    if not os.path.exists(tmp):
        trace("Create :"+tmp)
        os.mkdir(tmp)

    javaOut =binFolder+"out"
    if not os.path.exists(javaOut):
        trace("Create :"+javaOut)
        os.mkdir(javaOut)


    res = binFolder+"res"
    if not os.path.exists(res):
        trace("Create :"+res)
        os.mkdir(res)

    dexFiles = binFolder+"dex"
    if not os.path.exists(dexFiles):
        trace("Create :"+dexFiles)
        os.mkdir(dexFiles)


    javaFileDirs =java + OSP +ANDROID_PACK.replace(".",OSP)
    
    createFolderTree(javaFileDirs)




    #createFolderTree(javaFileDirs)


    manifFile=binFolder+"AndroidManifest.xml"
    global nativeManifeste

    nativeManifeste=nativeManifeste.replace("@apppkg@",ANDROID_PACK)
    nativeManifeste=nativeManifeste.replace("@applbl@",ANDROID_LABEL)
    nativeManifeste=nativeManifeste.replace("@appactv@",ANDROID_PACK+"."+ANDROID_ACTIVITY)
    if not os.path.exists(binFolder+"AndroidManifest.xml"):
        with open(binFolder+"AndroidManifest.xml", "w") as text_file:
            text_file.write(nativeManifeste)

    global javaNative
    javaNative=javaNative.replace("@apppkg@",ANDROID_PACK)
    javaNative=javaNative.replace("@appactv@",ANDROID_ACTIVITY)
    if not os.path.exists(javaFileDirs+OSP+ANDROID_ACTIVITY+".java"):
        with open(javaFileDirs+OSP+ANDROID_ACTIVITY+".java", "w") as text_file:
            text_file.write(javaNative)

    

    debugKey=binFolder+appName+".key"
    if not os.path.exists(debugKey):
        trace(" Generate "+debugKey+" keystor")
        args=[]
        args.append("-genkeypair")
        args.append("-validity")
        args.append("1000")  # mil anos???
        args.append("-dname")
        args.append("CN=djokersoft,O=Android,C=PT")
        args.append("-keystore")
        args.append(debugKey)
        args.append("-storepass")
        args.append("14781478")  #change pass
        args.append("-keypass")
        args.append("14781478")
        args.append("-alias")
        args.append("djokersoft")
        args.append("-keyalg")
        args.append("RSA")

        finalCommand = cmd_args_to_str(args)
        trace("keytool "+finalCommand)
        code, out, err=runProcess("keytool",args)
        if code!=0:
            trace("Error on generate keystore:"+err.decode("utf-8") )
            return False
        trace(out.decode("utf-8"))  


        


    args=[]
    args.append("package")
    args.append("-f")
    args.append("-m")
    args.append("-J")
    args.append(java)
    args.append("-M")
    args.append(manifFile)
    args.append("-S")
    args.append(res)
    args.append("-I")
    args.append(PLATFORM)

    trace("Generate resources .")
    code, out, err=runProcess(AAPT,args)
    if code!=0:
        trace("Error on generate resources:"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8"))    
    trace("Search java files ") 

    javaSrcFiles=[]
    for root, dirs, files in os.walk(java):
        for file in files:
            if file.endswith(".java"):
                print(os.path.join(root, file))   
                javaSrcFiles.append(os.path.join(root, file))

    javaSrcFiles.sort(reverse=True) 

    for src in javaSrcFiles:
        trace("Compile "+ src.strip())
        args=[]
        #args.append("-Xlint:deprecation")
        #args.append("-deprecation")
        #args.append("-Xmaxerrs")
        args.append("-nowarn")
        args.append("-Xlint:none")
        args.append("-J-Xmx2048m")
        args.append("-Xlint:unchecked")
            
        args.append("-source")
        args.append("1.8")
        args.append("-target")  
        args.append("1.8")
        args.append("-d")
        args.append(javaOut)
        #args.append("-bootclasspath")
        #args.append(JAVA_LIB_RT)
        args.append("-classpath")
        args.append(PLATFORM+":"+javaOut)
        args.append("-sourcepath")
        args.append(java+":"+java+"/org"+":"+javaOut)
        args.append(src)

        src_modified_time = os.path.getmtime(src)
        src_convert_time = time.ctime(src_modified_time)

        filename, file_extension = os.path.splitext(src)
        basename = os.path.basename(src)
        basename_without_ext = os.path.splitext(os.path.basename(src))[0]
        maindir = os.path.dirname(os.path.abspath(src))
        maindir = maindir.replace("java","out")
        objName=maindir+os.path.sep+basename_without_ext+".class"

        if os.path.exists(objName):
            obj_modified_time = os.path.getmtime(objName)
            obj_convert_time = time.ctime(obj_modified_time)
            if (src_convert_time<obj_convert_time):
                trace("Skip "+ src)
                continue
        
        
        code, out, err=runProcess("javac",args)
        if code!=0:
            trace("Error  compiling :"+err.decode("utf-8") )
            return False
        trace(out.decode("utf-8"))  
       

    trace('Java is compiled ...')

    trace('Translating in Dalvik bytecode...')
    args=[]
    args.append("--dex")
    args.append("--output="+dexFiles+os.path.sep+"classes.dex")
    args.append(javaOut)
    
    code, out, err=runProcess(DX,args)
    if code!=0:
        trace("Error  Translating java do dex :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8"))  

    trace('Making APK...')

    args=[]
    args.append("package")
    args.append("-f")
    args.append("-m")
    args.append("-F")
    args.append(tmp+os.path.sep+appName+".unaligned.apk")
    args.append("-M")
    args.append(manifFile)
    args.append("-S")
    args.append(res)
    args.append("-I")
    args.append(PLATFORM)
    
    
    code, out, err=runProcess(AAPT,args)
    if code!=0:
        trace("Error  packing apk :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8")) 

    trace("File is created in "+tmp+os.path.sep+appName+".unaligned.apk")

    zip = zipfile.ZipFile(tmp+os.path.sep+appName+".unaligned.apk",'a')
    buildOutputArm='armeabi-v7a'
    appBin = binFolder+buildOutputArm+os.path.sep+"lib"+appName+".so"
    
    if os.path.exists(appBin):
        trace("insert ",appBin)
        zip.write(appBin,"lib/armeabi-v7a/"+"lib"+appName+".so")
    else:
        trace("missing ",appBin)

    buildOutputArm='arm64-v8a'
    appBin = binFolder+buildOutputArm+os.path.sep+"lib"+appName+".so"
    
    if os.path.exists(appBin):
        trace("insert ",appBin)
        zip.write(appBin,"lib/arm64-v8a/"+"lib"+appName+".so")
    else:
        trace("missing ",appBin)


    dexListFiles=[]
    trace("look for dex files on ",dexFiles)
    for root, dirs, files in os.walk(dexFiles):
        for file in files:
            if file.endswith(".dex"):
                print("DEX: ",os.path.join(root, file)," filename :",os.path.basename(file))   
                dexListFiles.append(os.path.join(root, file))
    
    for dex in dexListFiles:
        trace("Insert ", dex ," to "+os.path.basename(dex))
        zip.write(dex,os.path.basename(dex))


    #zip.write(dexFiles+"classes.dex","classes.dex")
    zip.close()

    appSigned = binFolder+appName+".signed.apk"
    trace("Sign app ")
    args=[]
    args.append("sign")
    args.append("--ks")
    args.append(debugKey)
    args.append("--ks-key-alias")
    args.append("djokersoft")
    args.append("--ks-pass")
    args.append("pass:14781478")
    args.append("--in")
    args.append(tmp+os.path.sep+appName+".unaligned.apk")
    args.append("--out")
    args.append(appSigned)
    
    trace(cmd_args_to_str(args))
    
    code, out, err=runProcess(APKSIGNER,args)
    if code!=0:
        trace("Error  packing apk :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8")) 

    trace("Build competed ;D ")

    trace("Try stop  "+ANDROID_PACK+"...")
    args=[]
    args.append("shell")
    args.append("am")
    args.append("force-stop")
    args.append(ANDROID_PACK+"/."+ANDROID_ACTIVITY)
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  stoping  apk :"+err.decode("utf-8") )
    trace(out.decode("utf-8")) 

    trace('Try remove app ...')
    args=[]
    args.append("uninstall")
    args.append(ANDROID_PACK)
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  uninstall  apk :"+err.decode("utf-8") )
    trace(out.decode("utf-8")) 

    trace('Try install app ...')
    args=[]
    args.append("install")
    args.append("-r")
    args.append(appSigned)
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  installing  apk :"+err.decode("utf-8") )
        
    trace(out.decode("utf-8")) 

    trace('Try run app ...')
    args=[]
    args.append("shell")
    args.append("am")
    args.append("start")
    args.append("-n")
    args.append(ANDROID_PACK+"/."+ANDROID_ACTIVITY)
    
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  running  apk :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8")) 
    return True



def CompileJavaDesktop(mainRoot,appName,srcFolder,javaSrcFiles):
    OSP=os.path.sep
    outFolder=mainRoot+OSP+"out"+OSP
    
    
    if not os.path.exists(outFolder):
        trace("Create :"+outFolder)
        os.mkdir(outFolder)
    
    


    trace("Search java files ") 
    '''
    javaSrcFiles=[]
    for root, dirs, files in os.walk(java):
        for file in files:
            if file.endswith(".java"):
                print(os.path.join(root, file))   
                javaSrcFiles.append(os.path.join(root, file))

    javaSrcFiles.sort(reverse=True) 
    '''
    pathsList=[]
    for src in javaSrcFiles:
        
        path = os.path.dirname(os.path.abspath(src))
        if path not in pathsList:
            pathsList.append(path)


        args=[]
        #args.append("-Xlint:deprecation")
        #args.append("-deprecation")
        #args.append("-Xmaxerrs")
        args.append("-nowarn")
        args.append("-Xlint:none")
        args.append("-J-Xmx2048m")
        args.append("-Xlint:unchecked")
            
        args.append("-source")
        args.append("1.8")
        args.append("-target")  
        args.append("1.8")
        args.append("-d")
        args.append(outFolder)
        #args.append("-bootclasspath")
        #args.append(JAVA_LIB_RT+":"+JAVAFX+":"+JAVA_LIB_RT)
        args.append("-classpath")
        args.append(JAVAFX)
        args.append("-sourcepath")
        args.append(srcFolder+":"+outFolder)
        args.append(src)

        src_modified_time = os.path.getmtime(src)
        src_convert_time = time.ctime(src_modified_time)

        filename, file_extension = os.path.splitext(src)
        basename = os.path.basename(src)
        basename_without_ext = os.path.splitext(os.path.basename(src))[0]
        maindir = os.path.dirname(os.path.abspath(src))
        maindir = maindir.replace("src","out")
        objName=maindir+OSP+basename_without_ext+".class"

        if os.path.exists(objName):
            obj_modified_time = os.path.getmtime(objName)
            obj_convert_time = time.ctime(obj_modified_time)
            if (src_convert_time<obj_convert_time):
                trace("Skip "+ src)
                continue
        
        trace("Compile ", src,">" ,objName)
        code, out, err=runProcess("javac",args)
        if code!=0:
            trace("Error  compiling :"+err.decode("utf-8") )
            return False
        trace(out.decode("utf-8"))  
       

    trace('Java is compiled ...')

    args=[]

    args.append("-cp")
    addToClass=outFolder
    for p in pathsList:
        addToClass+=":"+p

    #args.append(outFolder+":"+outFolder+OSP+"camsview")
    args.append(addToClass)
    args.append(appName)

    trace(" Execute  java code ...")
    
    code, out, err=runProcess("java",args)
    if code!=0:
        trace("Error  Nuning :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8"))

  
    return True


def AndroidARM7Compile(folderRoot ,name, srcs ,CARGS,CPPARGS, LDARGS,buildType=0,fullBuild=False,runApp=False):
    useCPP=False


        
    OSP=os.path.sep    
    buildPlataform='23'
    buildOutputArm='armeabi-v7a'
    buildArch='armv7a'
    buildHost='linux-x86_64'
    CC  =ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/clang'
    CPP =ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/clang++'
    AR  =ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/arm-linux-androideabi-ar'
    STRIP=ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/arm-linux-androideabi-strip'

    outFolder=folderRoot+OSP+"obj"+OSP+"Android"+OSP+name+OSP+buildOutputArm
    binFolder=folderRoot+OSP+"Android"+OSP+name+OSP+buildOutputArm
    createFolderTree(outFolder)
    createFolderTree(binFolder)
    objsList=[]

    
    


    for src in srcs:
        if not os.path.isfile(src):
            trace("File not exists")
            continue
    
        args=[]
        srcFolder = os.path.dirname(os.path.abspath(src))
        objFolder =outFolder +  srcFolder.replace(folderRoot,"")
        
        createFolderTree(objFolder)
        filename, file_extension = os.path.splitext(src)
        basename = os.path.basename(src)
        basename_without_ext = os.path.splitext(os.path.basename(src))[0]
        objName = objFolder+os.path.sep+basename_without_ext+".o"
        objsList.append(objName)
        src_modified_time = os.path.getmtime(src)
        src_convert_time = time.ctime(src_modified_time)

        cType = CC
        if len(file_extension)>=3:
                cType=CPP
                useCPP=True
                
        
        if not fullBuild:       
            if os.path.exists(objName):
                obj_modified_time = os.path.getmtime(objName)
                obj_convert_time   = time.ctime(obj_modified_time)
                if (src_convert_time<obj_convert_time):
                    trace("Skip  file"+ src)
                    continue
            
                 
    
        
        trace (cType," ",os.path.basename(src),">",os.path.basename(objName))

            
        args.append("-target")
        args.append("armv7-none-linux-androideabi"+buildPlataform)
        args.append("-fdata-sections")
        args.append("-ffunction-sections")
        args.append("-fstack-protector-strong")
        args.append("-funwind-tables")
        args.append("-no-canonical-prefixes")
        args.append("-g")
        args.append("-Wno-invalid-command-line-argument")
        args.append("-Wno-unused-command-line-argument")
        args.append("-fno-stack-protector")
        args.append("-fno-exceptions")
        args.append("-fno-rtti")
        args.append("-D_FORTIFY_SOURCE=2")
        args.append("-fpic")
        args.append("-march=armv7-a")
        args.append("-mthumb")
        args.append("-nostdinc++")
        args.append("-Wformat")
        args.append("-Werror=format-security")
        args.append("-Oz")
        

        args.append("-DDNDEBUG")
        args.append("-DANDROID")
        args.append("-DPLATFORM_ANDROID")
        

        args.append("-I"+ANDROID_NDK+"/sources/cxx-stl/llvm-libc++/include")
        args.append("-I"+ANDROID_NDK+"/sources/cxx-stl/llvm-libc++abi/include")
        args.append("-I"+ANDROID_NDK+"/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include")
        args.append("-I"+ANDROID_NDK+"/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/arm-linux-androideabi")

        

        args.append("-I"+folderRoot)    
        args.append("-I"+srcFolder)
        rootFolder=os.getcwd()+OSP+"include"
        args.append("-I"+rootFolder)
        args.append("-I"+rootFolder+OSP+"SDL2")




        args.append("--sysroot")
        args.append(ANDROID_NDK+"toolchains/llvm/prebuilt/linux-x86_64/sysroot")                
        args.append("-c")
        args.append(src)
        args.append("-o")
        args.append(objName)
        

        if useCPP:
            for arg in CPPARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    print(arg)   
        else:
            for arg in CARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    


                        
            
        code, out, err=runProcess(cType,args)
        #print("err: '{}'".format(str(err)))
        #print("exit: {}".format(code))
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error: '
            #match = re.compile(rexp, re.DOTALL | re.IGNORECASE).findall(err.decode("utf-8"))
            erro =re.search(rexp,err.decode("utf-8"))
            try:    
                lineY=0
                lineX=0
                if erro:
                    linhas = erro.group().split(":")
                    lineX=int(linhas[2])
                    lineY=int(linhas[1])
            except:
                print("Erro unknow .. ")
            return False
        trace(out.decode("utf-8") )
    trace("Compiling completed")
    if buildType==0 or buildType==1:
        args=[]
        export = binFolder+OSP+"lib"+name+".so"
        trace("Build app ",buildArch," ",export )
        args.append("-Wl,-soname,"+"lib"+name+".so")
        args.append("-shared")

        objs=""
        for obj in objsList:
            objs+=obj+' '
            args.append(obj)
        
        #if linkCPP:        
        args.append(ANDROID_NDK+"/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libc++_static.a")
        args.append(ANDROID_NDK+"/sources/cxx-stl/llvm-libc++abi/../llvm-libc++/libs/armeabi-v7a/libc++abi.a")
        args.append(ANDROID_NDK+"/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a/libunwind.a")

        for arg in LDARGS:
            value =arg.strip()
            if len(value)>1:
                args.append(value)

        args.append("-Wl,--no-whole-archive")
        args.append("-lgcc")
        args.append("-Wl,--exclude-libs,libgcc.a")
        args.append("-Wl,--exclude-libs,libgcc_real.a")
        args.append("-latomic")
        args.append("-Wl,--exclude-libs,libatomic.a")
        args.append("-target")
        args.append(buildArch+"-none-linux-androideabi"+buildPlataform)
        args.append("-no-canonical-prefixes")
        args.append("-Wl,--build-id")
        args.append("-Wl,--exclude-libs,libunwind.a")
        args.append("-nostdlib++")
        args.append("-Wl,--no-undefined")
        args.append("-Wl,--fatal-warnings")
        
        
        args.append("-L"+ANDROID_NDK+"platforms/android-"+buildPlataform+"/arch-arm/usr/lib")
        args.append("-L"+ANDROID_NDK+"/sources/cxx-stl/llvm-libc++/libs/armeabi-v7a")
        rootFolder=os.getcwd()+"/libs/android/"+buildOutputArm
        args.append("-L"+rootFolder)
        args.append("-L"+ANDROID_NDK+"/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib")  
        if useCPP:
            args.append("-lc++_static")
            args.append("-lc++abi")
        args.append("-o")
        args.append(export)

        if useCPP:
            cType=CPP
        

        code, out, err=runProcess(cType,args)
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))


        trace("Strip library ")
        code, out, err=runProcess(STRIP,["--strip-unneeded",export])
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))
        trace("Native Done :) ")
        return True
            
      
      

    if buildType==2:
        trace("Build static lib")
        args=[]
        export = binFolder+OSP+"lib"+name+".a"
        args.append("rcs")
        args.append(export)
        objs=""
        for obj in objsList:
            objs+=obj+' '
            args.append(obj)
        code, out, err=runProcess(AR,args)
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))
        trace("Static build completed :) ")
        return True

    
def AndroidARM764Compile(folderRoot ,name, srcs ,CARGS,CPPARGS, LDARGS,buildType=0,fullBuild=False,runApp=False):
    useCPP=False


        
    OSP=os.path.sep    

    buildPlataform ='23'
    buildOutputArm ='arm64-v8a'
    buildArch ='aarch64'
    buildHost ='linux-x86_64'
    CC  =ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/clang'
    CPP =ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/clang++'
    AR  =ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/'+buildArch+'-linux-android-ar'
    STRIP=ANDROID_NDK+'/toolchains/llvm/prebuilt/'+buildHost+'/bin/'+buildArch+'-linux-android-strip'

    

    outFolder=folderRoot+OSP+"obj"+OSP+"Android"+OSP+name+OSP+buildOutputArm
    binFolder=folderRoot+OSP+"Android"+OSP+name+OSP+buildOutputArm
    createFolderTree(outFolder)
    createFolderTree(binFolder)
    objsList=[]

    
    


    for src in srcs:
        if not os.path.isfile(src):
            trace("File not exists")
            continue
    
        args=[]
        srcFolder = os.path.dirname(os.path.abspath(src))
        objFolder =outFolder +  srcFolder.replace(folderRoot,"")
        
        createFolderTree(objFolder)
        filename, file_extension = os.path.splitext(src)
        basename = os.path.basename(src)
        basename_without_ext = os.path.splitext(os.path.basename(src))[0]
        objName = objFolder+os.path.sep+basename_without_ext+".o"
        objsList.append(objName)
        src_modified_time = os.path.getmtime(src)
        src_convert_time = time.ctime(src_modified_time)

        cType = CC
        if len(file_extension)>=3:
                cType=CPP
                useCPP=True
                
        
        if not fullBuild:       
            if os.path.exists(objName):
                obj_modified_time = os.path.getmtime(objName)
                obj_convert_time   = time.ctime(obj_modified_time)
                if (src_convert_time<obj_convert_time):
                    trace("Skip  file"+ src)
                    continue
            
                 
    
        
        trace (cType," ",os.path.basename(src),">",os.path.basename(objName))

            
        args.append("-target")
        #args.append("aarch64")

            
        args.append(buildArch+"-none-linux-androideabi"+buildPlataform)
        args.append("-fdata-sections")
        args.append("-ffunction-sections")
        args.append("-fstack-protector-strong")
        args.append("-funwind-tables")
        args.append("-fno-exceptions")
        args.append("-fno-rtti")
        args.append("-Wno-invalid-command-line-argument")
        args.append("-Wno-unused-command-line-argument")
        args.append("-D_FORTIFY_SOURCE=2")
        args.append("-fpic")
        args.append("-Oz")
        args.append("-fPIC")
        args.append("-no-canonical-prefixes")
        args.append("-DDNDEBUG")
        args.append("-DANDROID")
        args.append("-DPLATFORM_ANDROID")
        

        args.append("-I"+ANDROID_NDK+OSP+"sources/cxx-stl/llvm-libc++/include")
        args.append("-I"+ANDROID_NDK+OSP+"sources/cxx-stl/llvm-libc++abi/include")
        args.append("-I"+folderRoot)    
        args.append("-I"+srcFolder)
        rootFolder=os.getcwd()+OSP+"include"
        args.append("-I"+rootFolder)
        args.append("-I"+rootFolder+OSP+"SDL2")



        args.append("--sysroot")
        args.append(ANDROID_NDK+"toolchains/llvm/prebuilt/linux-x86_64/sysroot")  
        args.append("-I"+ANDROID_NDK+"/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include")
        args.append("-I"+ANDROID_NDK+"/toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/include/aarch64-linux-android")
              
        args.append("-c")
        args.append(src)
        args.append("-o")
        args.append(objName)
        

        if useCPP:
            for arg in CPPARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    print(arg)   
        else:
            for arg in CARGS: 
                value =arg.strip()
                if len(value)>=2:
                    args.append(arg)
                    


                        
        
        code, out, err=runProcess(cType,args)
        #print("err: '{}'".format(str(err)))
        #print("exit: {}".format(code))
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error: '
            #match = re.compile(rexp, re.DOTALL | re.IGNORECASE).findall(err.decode("utf-8"))
            erro =re.search(rexp,err.decode("utf-8"))
            try:    
                lineY=0
                lineX=0
                if erro:
                    linhas = erro.group().split(":")
                    lineX=int(linhas[2])
                    lineY=int(linhas[1])
            except:
                trace("Erro unknow .. ")
            return False
        trace(out.decode("utf-8") )
    trace("Compiling completed")
    if buildType==0 or buildType==1:
        args=[]
        export = binFolder+OSP+"lib"+name+".so"
        trace("Build app ",buildArch," ",export )
        args.append("-Wl,-soname,"+"lib"+name+".so")
        args.append("-Wl,--exclude-libs,libatomic.a ")
        args.append("-Wl,--build-id")
        args.append("-Wl,--no-undefined")
        args.append("-Wl,-z,noexecstack")
        args.append("-Wl,-z,relro")
        args.append("-Wl,-z,now")
        args.append("-Wl,--warn-shared-textrel")
        args.append("-Wl,--fatal-warnings")
        args.append("-target")
        args.append(buildArch+"-none-linux-androideabi"+buildPlataform)
        args.append("-shared")

        objs=""
        for obj in objsList:
            objs+=obj+' '
            args.append(obj)
        
        #if useCPP:
        args.append(ANDROID_NDK+"/sources/cxx-stl/llvm-libc++/libs/"+buildOutputArm+"/libc++_static.a")
        args.append(ANDROID_NDK+"/sources/cxx-stl/llvm-libc++abi/../llvm-libc++/libs/"+buildOutputArm+"/libc++abi.a")
        

        for arg in LDARGS:
            value =arg.strip()
            if len(value)>1:
                args.append(value)

        
        
        args.append("-L"+ANDROID_NDK+"/sources/cxx-stl/llvm-libc++/libs/"+buildOutputArm)
        rootFolder=os.getcwd()+OSP+"libs"+OSP+"android"+OSP+buildOutputArm
        args.append("-L"+rootFolder)
        args.append("-L"+ANDROID_NDK+"toolchains/llvm/prebuilt/linux-x86_64/sysroot/usr/lib")  
        if useCPP:
            args.append("-lc++_static")
            args.append("-lc++abi")
        args.append("-o")



        args.append(export)

        if useCPP:
            cType=CPP
        

        code, out, err=runProcess(cType,args)
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))


        trace("Strip library ")
        code, out, err=runProcess(STRIP,["--strip-unneeded",export])
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))
        trace("Native Done :) ")
        return True
    
            
      
      

    if buildType==2:
        trace("Build static lib")
        args=[]
        export = binFolder+OSP+"lib"+name+".a"
        args.append("rcs")
        args.append(export)
        objs=""
        for obj in objsList:
            objs+=obj+' '
            args.append(obj)
        code, out, err=runProcess(AR,args)
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))
        args=[]
        export = binFolder+OSP+"lib"+name+".a"
        args.append("-t")
        args.append(export)
        objs=""
        for obj in objsList:
            objs+=obj+' '
            args.append(obj)
        code, out, err=runProcess(AR,args)
        if code!=0:
            trace(err.decode("utf-8") )
            rexp=':(.*?):(.*?): error:'
            return False
        trace(out.decode("utf-8"))
        trace("Static build completed :) ")
    return True    
        

def androidCompileJavaFx(mainRoot,appName,ANDROID_PACK,ANDROID_ACTIVITY):


    OSP=os.path.sep
    

    
    java = mainRoot+OSP+"src"


    tmp = mainRoot+OSP+"tmp"
    if not os.path.exists(tmp):
        trace("Create :"+tmp)
        os.mkdir(tmp)

    javaOut =mainRoot+OSP+"out"
    if not os.path.exists(javaOut):
        trace("Create :"+javaOut)
        os.mkdir(javaOut)


    res = mainRoot+OSP+"res"
    if not os.path.exists(res):
        trace("Create :"+res)
        os.mkdir(res)

    dexFiles = mainRoot+OSP+"dex"+OSP
    if not os.path.exists(dexFiles):
        trace("Create :"+dexFiles)
        os.mkdir(dexFiles)

    assets = mainRoot+OSP+"assets"
    if not os.path.exists(assets):
        trace("Create :"+assets)
        os.mkdir(assets)

    

    debugKey=mainRoot+OSP+appName+".key"
    if not os.path.exists(debugKey):
        trace(" Generate "+debugKey+" keystor")
        args=[]
        args.append("-genkeypair")
        args.append("-validity")
        args.append("1000")  # mil anos???
        args.append("-dname")
        args.append("CN=djokersoft,O=Android,C=PT")
        args.append("-keystore")
        args.append(debugKey)
        args.append("-storepass")
        args.append("14781478")  #change pass
        args.append("-keypass")
        args.append("14781478")
        args.append("-alias")
        args.append("djokersoft")
        args.append("-keyalg")
        args.append("RSA")

        
        code, out, err=runProcess("keytool",args)
        if code!=0:
            trace("Error on generate keystore:"+err.decode("utf-8") )
            return False
        trace(out.decode("utf-8"))  


        

    manifFile = mainRoot+OSP+"AndroidManifest.xml"
    args=[]
    args.append("package")
    args.append("-f")
    args.append("-m")
    args.append("-J")
    args.append(java)
    args.append("-A")
    args.append(assets)

    args.append("-M")
    args.append(manifFile)
    args.append("-S")
    args.append(res)
    args.append("-I")
    args.append(PLATFORM)

    trace("Generate resources .")
    code, out, err=runProcess(AAPT,args)
    if code!=0:
        trace("Error on generate resources:"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8"))  

    jumpCompile=False
    if not jumpCompile:  
        trace("Search java files ") 

        javaSrcFiles=[]
        for root, dirs, files in os.walk(java):
            for file in files:
                if file.endswith(".java"):
                    print(os.path.join(root, file))   
                    javaSrcFiles.append(os.path.join(root, file))

        javaSrcFiles.sort(reverse=True) 

        for src in javaSrcFiles:
            trace("Compile "+ src.strip())
            args=[]
            args.append("-nowarn")
            args.append("-Xlint:none")
            args.append("-J-Xmx2048m")
            args.append("-Xlint:unchecked")
                
            args.append("-source")
            args.append("1.8")
            args.append("-target")  
            args.append("1.8")
            args.append("-d")
            args.append(javaOut)
            args.append("-classpath")
            args.append(ANDROIDFXRT+":"+ANDROIDJFXDVK+":"+PLATFORM+":"+javaOut)
            args.append("-sourcepath")
            args.append(java+":"+javaOut)
            args.append(src)

            src_modified_time = os.path.getmtime(src)
            src_convert_time = time.ctime(src_modified_time)

            filename, file_extension = os.path.splitext(src)
            basename = os.path.basename(src)
            basename_without_ext = os.path.splitext(os.path.basename(src))[0]
            maindir = os.path.dirname(os.path.abspath(src))
            maindir = maindir.replace("java","out")
            objName=maindir+os.path.sep+basename_without_ext+".class"

            if os.path.exists(objName):
                obj_modified_time = os.path.getmtime(objName)
                obj_convert_time = time.ctime(obj_modified_time)
                if (src_convert_time<obj_convert_time):
                    trace("Skip "+ src)
                    continue
            
            
            code, out, err=runProcess("javac",args)
            if code!=0:
                trace("Error  compiling :"+err.decode("utf-8") )
                return False
            trace(out.decode("utf-8"))  
        
        trace('Java is compiled ...')

          
  

    useDX8=True
    if useDX8:
        trace("Translating in Dalvik bytecode...")

        javaClassFiles=[]
        for root, dirs, files in os.walk(javaOut):
            for file in files:
                if file.endswith(".class"):
                      
                    javaClassFiles.append(os.path.join(root, file))

        args=[]
        args.append("--release")
        #args.append("--min-api")
        #args.append("21")
        args.append("--intermediate")
        args.append("--lib")
        args.append(PLATFORM)
        args.append("--classpath")
        args.append(JAVA_LIB_RT)
        for c in javaClassFiles:
            args.append(c)
        args.append("--output")
        args.append(dexFiles)
        code, out, err=runProcess(DX8,args)
        if code!=0:
            trace("Error  compiling :"+err.decode("utf-8") )
            return False
        trace(out.decode("utf-8"))

    

    useDX=False
    if useDX:
        trace("Translating in Dalvik bytecode...")

        trace("Translating ",ANDROIDFXRT," Dalvik bytecode...")
        args=[]
        args.append("--dex")
        args.append("--core-library")
        args.append("--output="+dexFiles+"classes2.dex")
        args.append(ANDROIDFXRT)
        code, out, err=runProcess(DX,args)
        if code!=0:
            trace("Error  Translating ",ANDROIDFXRT," do dex :"+err.decode("utf-8") )
            return
        trace(out.decode("utf-8"))  
  
        trace("Translating ",ANDROIDFXRT," Dalvik bytecode...")
        args=[]
        #args.append("--min-sdk-version=26")
        args.append("--dex")
        args.append("--core-library")
        args.append("--output="+dexFiles+"classes3.dex")
        args.append(ANDROIDJFXDVK)
        code, out, err=runProcess(DX,args)
        if code!=0:
            trace("Error  Translating ",ANDROIDJFXDVK," do dex :"+err.decode("utf-8") )
            return
        trace(out.decode("utf-8"))  

 

        trace("Translating ",ANDROIDFXRT," Dalvik bytecode...")
        #$DX   --dex --core-library   --output=$APPNAME/bin/classes.dex    $ANDROIDFXRT
        args=[]
        #args.append("--min-sdk-version=26")
        args.append("--dex")
        args.append("--core-library")
        args.append("--output="+dexFiles+"classes4.dex")
        args.append(ANDROIDFXCOMPACT)
        args.append(ANDROIDMULTIDEX)
        code, out, err=runProcess(DX,args)
        if code!=0:
            trace("Error  Translating ",ANDROIDFXCOMPACT," do dex :"+err.decode("utf-8") )
            return
        trace(out.decode("utf-8"))      

                 

    trace('Making APK...')

    args=[]
    args.append("package")
    args.append("-f")
    args.append("-m")
    args.append("-F")
    args.append(tmp+OSP+appName+".unaligned.apk")
    args.append("-M")
    args.append(manifFile)
    args.append("-S")
    args.append(res)
    args.append("-I")
    args.append(PLATFORM)
    
    
    code, out, err=runProcess(AAPT,args)
    if code!=0:
        trace("Error  packing apk :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8")) 

    trace("File is created in "+tmp+OSP+appName+".unaligned.apk")

    zip = zipfile.ZipFile(tmp+OSP+appName+".unaligned.apk",'a')

    dexListFiles=[]
    trace("look for dex files on ",dexFiles)
    for root, dirs, files in os.walk(dexFiles):
        for file in files:
            if file.endswith(".dex"):
                #print("DEX: ",os.path.join(root, file)," filename :",os.path.basename(file))   
                dexListFiles.append(os.path.join(root, file))
    
    for dex in dexListFiles:
        #trace("Insert ", dex ," to "+os.path.basename(dex))
        zip.write(dex,os.path.basename(dex))
    
    javaFXPath=os.getcwd()+os.path.sep+"javafx/"
    jumpArm=False
    if not jumpArm:
        soListFiles=[]
        sharedFiles=javaFXPath+"lib/armeabi-v7a"
        #trace("look for shared files on ",sharedFiles)
        for root, dirs, files in os.walk(sharedFiles):
            for file in files:
                if file.endswith(".so"):
                    #print("dos: ",os.path.join(root, file)," filename :",os.path.basename(file))   
                    soListFiles.append(os.path.join(root, file))
        
        for so in soListFiles:
            #trace("Insert ", so ," to "+os.path.basename(so))
            zip.write(so,"lib/armeabi-v7a/"+os.path.basename(so))
    
    useArm64=False
    if useArm64:
        soListFiles=[]
        sharedFiles=javaFXPath+"lib/arm64-v8a"
        #trace("look for shared files on ",sharedFiles)
        for root, dirs, files in os.walk(sharedFiles):
            for file in files:
                if file.endswith(".so"):
                    #print("dos: ",os.path.join(root, file)," filename :",os.path.basename(file))   
                    soListFiles.append(os.path.join(root, file))
        
        for so in soListFiles:
            #trace("Insert ", so ," to "+os.path.basename(so))
            zip.write(so,"lib/arm64-v8a/"+os.path.basename(so))
    
    

    zip.write(javaFXPath+"androidsupportmultidexversion.txt","androidsupportmultidexversion.txt")
    zip.write(javaFXPath+"javafx.platform.properties","javafx.platform.properties")
    zip.write(javaFXPath+"javafx.properties","javafx.properties")
    #zip.write(javaFXPath+"javafx.platform.properties","assets/javafx.platform.properties")
    #zip.write(javaFXPath+"javafx.properties","assets/javafx.properties")
    #zip.write(javaFXPath+"version.rc","assets/version.rc")

    zip.write(javaFXPath+"version.rc","version.rc")
    
    zip.write(javaFXPath+"res"+OSP+"icon.png","icon.png")
    zip.write(javaFXPath+"dex"+OSP+"classes2.dex","classes2.dex")
    zip.write(javaFXPath+"dex"+OSP+"classes3.dex","classes3.dex")
    zip.write(javaFXPath+"dex"+OSP+"classes4.dex","classes4.dex")
    
    extraFiles=javaFXPath+"extra"
    assetsListFiles=[]
    for root, dirs, files in os.walk(extraFiles):
        for file in files:
                #print("dos: ",os.path.join(root, file))   
                assetsListFiles.append(os.path.join(root, file))
    
    for extra in assetsListFiles:
        newName=extra.replace(extraFiles,"")
        #trace("Insert ", extra ," to "+newName)
        zip.write(extra,newName)

    zip.close()

    appSigned = mainRoot+OSP+appName+".signed.apk"
    trace("Sign app ")
    args=[]
    args.append("sign")
    args.append("--ks")
    args.append(debugKey)
    args.append("--ks-key-alias")
    args.append("djokersoft")
    args.append("--ks-pass")
    args.append("pass:14781478")
    args.append("--in")
    args.append(tmp+OSP+appName+".unaligned.apk")
    args.append("--out")
    args.append(appSigned)
    
    
    
    code, out, err=runProcess(APKSIGNER,args)
    if code!=0:
        trace("Error  packing apk :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8")) 

    trace("Build competed ;D ")

    trace("Try stop  "+ANDROID_PACK+"...")
    args=[]
    args.append("shell")
    args.append("am")
    args.append("force-stop")
    args.append(ANDROID_PACK+"/"+ANDROID_ACTIVITY)
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  stoping  apk :"+err.decode("utf-8") )
    trace(out.decode("utf-8")) 

    trace('Try remove app ...')
    args=[]
    args.append("uninstall")
    args.append(ANDROID_PACK)
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  uninstall  apk :"+err.decode("utf-8") )
    trace(out.decode("utf-8")) 

    trace('Try install app ...')
    args=[]
    args.append("install")
    args.append("-r")
    args.append(appSigned)
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  installing  apk :"+err.decode("utf-8") )
        
    trace(out.decode("utf-8")) 

    trace('Try run app ...')
    args=[]
    args.append("shell")
    args.append("am")
    args.append("start")
    args.append("-n")
    args.append(ANDROID_PACK+"/"+ANDROID_ACTIVITY)
    
    code, out, err=runProcess(ANDROID_SDK+"/platform-tools/adb",args)
    if code!=0:
        trace("Error  running  apk :"+err.decode("utf-8") )
        return False
    trace(out.decode("utf-8")) 
    return True


'''
args=[]     
ldargs=[]
srcs=[]   

#srcs.append("/media/djoker/code/linux/python/compiler/java/src/Main.java")
#CompileJavaDesktop("/media/djoker/code/linux/python/compiler/java","Main","/media/djoker/code/linux/python/compiler/java/src",srcs)

srcFiles="/media/djoker/code/linux/python/compiler/java/src/com"
for root, dirs, files in os.walk(srcFiles):
    for file in files:
            if file.endswith(".java"):
                srcs.append(os.path.join(root, file))

srcFiles="/media/djoker/code/linux/python/compiler/java/src/utils"
for root, dirs, files in os.walk(srcFiles):
    for file in files:
            if file.endswith(".java"):
                srcs.append(os.path.join(root, file))

srcFiles="/media/djoker/code/linux/python/compiler/java/src/org"
for root, dirs, files in os.walk(srcFiles):
    for file in files:
            if file.endswith(".java"):
                srcs.append(os.path.join(root, file))

srcFiles="/media/djoker/code/linux/python/compiler/java/src/camsview"
for root, dirs, files in os.walk(srcFiles):
    for file in files:
            if file.endswith(".java"):
                srcs.append(os.path.join(root, file))

#srcs.append("/media/djoker/code/linux/python/compiler/java/src/MyFxApp.java")
CompileJavaDesktop("/media/djoker/code/linux/python/compiler/java","camsview.CamsView","/media/djoker/code/linux/python/compiler/java/src",srcs)



#androidCompileJavaFx("/media/djoker/code/linux/python/compiler/java","helloandroid","com.raylib.rgame","javafxports.android.FXActivity")
'''


'''
ldargs.append("-L/media/djoker/code/linux/python/compiler/libs/linux/")
ldargs.append("-lraylib")
ldargs.append("-lm")
ldargs.append("-lGL")
ldargs.append("-ldl")
ldargs.append("-lpthread")
'''


'''
args.append("-Wall")
args.append("-std=c99")
args.append("-D_DEFAULT_SOURCE")
args.append("-Wno-missing-braces")
args.append("-s")
args.append("USE_GLFW=3")
args.append("-DPLATFORM_WEB")
args.append("-I/media/djoker/code/linux/python/compiler/include")


ldargs.append("-s")
ldargs.append("ASYNCIFY")
ldargs.append("-s")
ldargs.append("FORCE_FILESYSTEM=1")
ldargs.append("-s")
ldargs.append("-DPLATFORM_WEB")
ldargs.append("-s")
ldargs.append("TOTAL_MEMORY=67108864")

ldargs.append("-s")
ldargs.append("USE_GLFW=3")
#ldargs.append("-L/media/djoker/code/linux/python/compiler/libs/web")
ldargs.append("-lraylib")


srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/src/main.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/src/core/core.c")

folderRoot="/media/djoker/code/linux/python/compiler/teste/raylib"
#LinuxCompile(folderRoot,"myapp",srcs,args,args,ldargs,0,True,True)
WebCompile(folderRoot,"myapp",srcs,args,args,ldargs,0,True,True)

#with socketserver.TCPServer(("", PORT), Handler) as httpd:
#    print("serving at port", PORT)
#    httpd.serve_forever()
#python -m http.server --directory /tmp/
'''


'''
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/src/main.c")
#srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/src/android_native_app_glue.c")

folderRoot="/media/djoker/code/linux/python/compiler/teste/raylib"



args.append("-Wall")
args.append("-std=c99")
args.append("-D_DEFAULT_SOURCE")


ldargs.append("-uANativeActivity_onCreate")
ldargs.append("-lm")
ldargs.append("-lc")
ldargs.append("-lraylib")
ldargs.append("-llog")
ldargs.append("-landroid")
ldargs.append("-lEGL")
ldargs.append("-lGLESv2")
ldargs.append("-lOpenSLES")
ldargs.append("-ldl")

build = True


build = AndroidARM7Compile(folderRoot,"main",srcs,args,args,ldargs,0,True,True)
#build = AndroidARM764Compile(folderRoot,"main",srcs,args,args,ldargs,0,True,True)
if build:
    androidCompileJavaNative(folderRoot,"main","com.djokersoft.simplegame","SimpleGame","NativeLoader",True)

'''


'''
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/android_native_app_glue.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/core.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/models.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/textures.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/utils.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/shapes.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/text.c")
srcs.append("/media/djoker/code/linux/python/compiler/teste/raylib/raylib/src/raudio.c")


folderRoot="/media/djoker/code/linux/python/compiler/teste/raylib/raylib"



args.append("-Wall")
args.append("-std=c99")
args.append("-D_DEFAULT_SOURCE")
args.append("-DPLATFORM_ANDROID")
args.append("-DGRAPHICS_API_OPENGL_ES2")


ldargs.append("-lm")
ldargs.append("-lc")
ldargs.append("-lraylib")
ldargs.append("-llog")
ldargs.append("-landroid")
ldargs.append("-lEGL")
ldargs.append("-lGLESv2")
ldargs.append("-lOpenSLES")
ldargs.append("-ldl")

#AndroidARM7Compile(folderRoot,"raylib",srcs,args,args,ldargs,2,True,True)
AndroidARM764Compile(folderRoot,"raylib",srcs,args,args,ldargs,2,True,True)
'''